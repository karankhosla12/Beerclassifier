<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Beer Type Classifier</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.1.3/css/bootstrap.min.css">
    <style>
        body {
            background-color: #f8f9fa;
            font-family: Arial, sans-serif;
        }
        h1 {
            color: #343a40;
        }
        #mainLogo {
            display: block;
            margin: 0 auto;
            width: 150px;
            border-radius: 50%;
        }
        #flashLogo {
            display: block;
            margin: 20px auto;
            width: 150px;
            border-radius: 50%;
            animation: flash 1s linear infinite;
        }
        .container {
            background: #ffffff;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        .list-group-item {
            font-size: 1.1em;
        }
        #outputBox {
            background: #f1f1f1;
            padding: 15px;
            border-radius: 5px;
            margin-top: 15px;
            max-height: 300px;
            overflow-y: auto;
            font-family: monospace;
        }
        @keyframes flash {
            0%, 100% {
                opacity: 1;
            }
            50% {
                opacity: 0;
            }
        }
    </style>
</head>
<body>
    <div class="container mt-5">
        <img id="flashLogo" src="gdu.jpeg" alt="Flash Logo">
        <img id="mainLogo" src="beer.jpeg" alt="Beer Logo">
        <h1 class="text-center">Beer Type Classifier</h1>
        <form id="uploadForm" class="mt-4">
            <div class="mb-3">
                <label for="image" class="form-label">Upload an image of a beer:</label>
                <input type="file" class="form-control" id="image" name="image" required>
            </div>
            <button type="submit" class="btn btn-primary">Classify</button>
        </form>
        <div id="result" class="mt-4"></div>
        <div id="outputBox"></div>
    </div>

    <script>
        const API_URL = "https://api-inference.huggingface.co/models/openai/clip-vit-large-patch14";
        const API_KEY = "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";
        const BEER_TYPES = [
            "Pale Lager", "Dark Lager", "Amber Lager", "Pale Ale", "India Pale Ale (IPA)",
            "Porter", "Stout", "Wheat Beer", "Sour Beer", "Fruit Beer"
        ];

        // Flash the gdu.jpeg image on page load
        window.addEventListener('load', () => {
            const flashLogo = document.getElementById('flashLogo');
            flashLogo.style.animation = 'flash 1s linear';
        });

        document.getElementById('uploadForm').addEventListener('submit', async (event) => {
            event.preventDefault();
            const fileInput = document.getElementById('image');
            if (fileInput.files.length === 0) {
                alert('Please upload an image.');
                return;
            }

            const imageFile = fileInput.files[0];
            const reader = new FileReader();

            reader.onload = async () => {
                const base64Image = reader.result.split(',')[1];
                const payload = {
                    inputs: base64Image,
                    parameters: { candidate_labels: BEER_TYPES }
                };

                try {
                    const response = await fetch(API_URL, {
                        method: 'POST',
                        headers: {
                            'Authorization': `Bearer ${API_KEY}`,
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(payload)
                    });

                    const resultDiv = document.getElementById('result');
                    const outputBox = document.getElementById('outputBox');

                    if (response.ok) {
                        const data = await response.json();
                        outputBox.textContent = JSON.stringify(data, null, 2); // Display raw JSON response

                        if (data && Array.isArray(data)) {
                            let resultHtml = '<h2>Predicted Beer Types:</h2><ul class="list-group">';
                            data.forEach(item => {
                                const probability = (item.score * 100).toFixed(2);
                                resultHtml += `<li class="list-group-item">${item.label} - ${probability}%</li>`;
                            });
                            resultHtml += '</ul>';

                            resultDiv.innerHTML = resultHtml;
                        } else {
                            resultDiv.innerHTML = '<p class="text-danger">Invalid response data format.</p>';
                        }
                    } else {
                        const error = await response.json();
                        outputBox.textContent = JSON.stringify(error, null, 2); // Display raw JSON error
                        resultDiv.innerHTML = `<p class="text-danger">Error: ${error.error}</p>`;
                    }
                } catch (error) {
                    document.getElementById('result').innerHTML = `<p class="text-danger">An error occurred: ${error.message}</p>`;
                    outputBox.textContent = JSON.stringify(error, null, 2); // Display raw error in the output box
                }
            };

            reader.readAsDataURL(imageFile);
        });
    </script>
</body>
</html>
